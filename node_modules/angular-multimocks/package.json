{
  "name": "angular-multimocks",
  "version": "0.5.4",
  "description": "Tools for managing mock data scenarios in AngularJS applications",
  "repository": {
    "type": "git",
    "url": "git://github.com/wongatech/angular-multimocks"
  },
  "scripts": {
    "test": "grunt build test",
    "postinstall": "bower install"
  },
  "dependencies": {
    "lodash": "~2.4.1"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-clean": "~0.4.1",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-uglify": "~0.2.0",
    "grunt-contrib-watch": "~0.5.3",
    "connect": "~2.9.0",
    "karma": "^0.12.16",
    "grunt-karma": "~0.10.1",
    "karma-coverage": "^0.2.1",
    "karma-ng-scenario": "^0.1.0",
    "karma-jasmine": "^0.1.5",
    "karma-firefox-launcher": "^0.1.3",
    "karma-phantomjs-launcher": "^0.1.4",
    "karma-chrome-launcher": "^0.1.3"
  },
  "readme": "Angular Multimocks\n==================\n\n[![Build Status](https://travis-ci.org/wongatech/angular-multimocks.svg?branch=master)](https://travis-ci.org/wongatech/angular-multimocks)\n\nAngular Multimocks lets you test how your app behaves with different responses\nfrom an API.\n\nAngular Multimocks allows you to define sets of mock API responses for different\nscenarios as JSON files. A developer of an e-commerce app could set up scenarios\nfor a new customer, one who is registered and one who has an order outstanding.\n\nAngular Multimocks allows you to switch between scenarios using a query string\nparameter: `?scenario=foo`.\n\nYou can use Angular Multimocks to quickly test your app works in all situations\nwhile developing or to provide mock data for a suite of automated acceptance\ntests.\n\nExample Use Case\n----------------\n\nYou have an application which calls to `http://example.com/cart` to get a list\nof items in the customer's shopping cart. You'd like to be able to easily\nswitch between different API responses so that you can test the various use\ncases. You may want responses for the following:\n\n| Scenario                              | URL                             |\n| ------------------------------------- | ------------------------------- |\n| Shopping cart is empty                | `/cart?scenario=emptyCart`      |\n| Shopping cart with a quick buy option | `/cart?scenario=quickBuyCart`   |\n| Shopping cart with out of stock items | `/cart?scenario=outOfStockCart` |\n\nDemo App\n--------\n\nSee `demo/` for a demo app. Inside the demo app, run `grunt` to generate the\nmocks, then open `index.html` in your browser.\n\nUsage\n-----\n\nAdd Angular Multimocks to your project with Bower:\n\n```sh\nbower install --save angular-multimocks\n```\n\nInclude `angular-multimocks.js` or `angular-multimocks.min.js` in your\napplication:\n\n```html\n<script src=\"bower_components/angular-multimocks/app/package/js/angular-multimocks.min.js\"></script>\n```\n\nAngular Multimocks currently depends on Angular UI Router but will not in\na future release. Include `angular-ui-router.js` or `angular-ui-router.min.js`\nin your application:\n\n```html\n<script src=\"bower_components/angular-ui-router/release/angular-ui-router.min.js\"></script>\n```\n\nAngular Multimocks depends on Angular Mocks include `angular-multimocks.js`\nin your application:\n\n```html\n<script src=\"bower_components/angular-mocks/angular-mocks.js\"></script>\n```\n\nAdd `scenario` and `ngMockE2E` to your application:\n\n```javascript\nangular\n  .module('demo', ['scenario', 'ngMockE2E'])\n  // more code here...\n```\n\nMock Format\n-----------\n\nResource files look like this:\n\n```json\n{\n  \"httpMethod\": \"GET\",\n  \"statusCode\": 200,\n  \"uri\": \"/customer/cart\",\n  \"response\": {\n    \"id\": \"foo\"\n  }\n}\n```\n\nThe `uri` property defines the URI that is being mocked in your application\nand can contain a regex:\n\n```\n\"uri\": \"/customer/\\\\d*/cart\"\n```\n\n### Delayed responses\n\nIn some scenarios you may want to simulate a delay getting a response for a\nresource. Mocks accept an optional `responseDelay` property that will delay\nthe response for the specified time in milliseconds:\n\n```\n\"responseDelay\": 500\n```\n\nThe manifest file `mockResources.json` defines the available scenarios and\ndescribes which version of each resource should be used for each scenario.\n\n```json\n{\n  \"_default\": [\n    \"root/_default.json\",\n    \"account/anonymous.json\",\n    \"orders/_default.json\"\n  ],\n  \"loggedIn\": [\n    \"account/loggedIn.json\"\n  ]\n}\n```\n\nAll scenarios inherit resources defined in `_default` unless they provide an\noverride. Think of `_default` as the base class for scenarios.\n\nThe example above defines 2 scenarios `_default` and `loggedIn`. `loggedIn` has\nthe default versions of the `root` and `orders` resources, but overrides\n`account`, using the version in `account/loggedIn.json`.\n\nGrunt Task\n----------\n\nAngular Multimocks defines a Grunt task called `multimocks`, which will compile\nresources into an AngularJS module definition. Add the Grunt task to your build\nand make the module a depedency in your app to enable scenarios.\n\nInstall the module using npm:\n\n```sh\nnpm install --save-dev angular-multimocks\n```\n\nAdd it to your Grunt configuration:\n\n```javascript\n// load the task\ngrunt.loadNpmTasks('angular-multimocks');\n\n// configuration for scenarios\ngrunt.initConfig({\n  multimocks: {\n    myApp: {\n      src: 'mocks',\n      dest: 'build/multimocks.js',\n      template: 'myTemplate.tpl' // optional\n    }\n  },\n  // other config here...\n});\n```\n\nOnce the task is run, `build/multimocks.js` will be generated containing all your\nmock data. Include that in your app:\n\n```html\n<script src=\"build/multimocks.js\"></script>\n```\n\n### Output Scenarios In Multiple Files\n\nIf the generated `build/multimocks.js` is too large, you may experience memory\nissues when running your application.\n\nYou can choose to build multiple files, one for each scenario by specifying\n`multipleFiles: true` and `dest` as a directory.\n\nYour Grunt configuration should look something like:\n\n```javascript\n// load the task\ngrunt.loadNpmTasks('angular-multimocks');\n\n// configuration for scenarios\nmultimocks: {\n  myApp: {\n    src: 'mocks',\n    dest: 'build/multimocks',\n    multipleFiles: true,\n    template: 'myTemplate.tpl' // optional\n  }\n},\n```\n\nWhen the task is run a file will be generated for each scenario. Include all\nthe generated files in your app:\n\n```html\n<script src=\"build/scenarios/_default.js\"></script>\n<script src=\"build/scenarios/foo.js\"></script>\n<script src=\"build/scenarios/bar.js\"></script>\n```\n\nHAL Plugin\n----------\n\nIf your API conforms to [HAL](http://stateless.co/hal_specification.html),\nAngular Multimocks can generate links for you to speed development.\n\nEnable the plugin in your `Gruntfile.js`:\n\n```javascript\nmultimocks: {\n  myApp: {\n    src: 'mocks',\n    dest: 'build/multimocks',\n    plugins: ['hal']\n  }\n}\n```\n\nOrganise your mock response files into a file structure with a directory for\neach resource, e.g.:\n\n```\n.\n├── account\n│   ├── loggedIn.json\n│   └── anonymous.json\n├── orders\n│   └── _default.json\n├── root\n│   └── _default.json\n└── mockResources.json\n```\n\nAngular Multimocks will add a `_links` object to each response with all the\nknown resources declared as available links:\n\n```json\n{\n  \"httpMethod\": \"GET\",\n  \"statusCode\": 200,\n  \"response\": {\n    \"id\": \"foo\",\n    \"_links\": {\n      \"root\": {\n        \"rel\": \"root\",\n        \"method\": \"GET\",\n        \"href\": \"http://example.com/\"\n      },\n      \"account\": {\n        \"rel\": \"account\",\n        \"method\": \"GET\",\n        \"href\": \"http://example.com/account\"\n      },\n      \"orders\": {\n        \"rel\": \"orders\",\n        \"method\": \"GET\",\n        \"href\": \"http://example.com/orders\"\n      }\n    }\n  }\n}\n```\n\nA `uri` will be generated for each resource. This value is used for the `href`\nfield of each object in `_links`.\n\n`multimocksDataProvider`\n------------------------\n\nAngular Multimocks also declares a provider, `multimocksDataProvider`, which\nallows you to set mock data by passing an object to the `setMockData` method.\n\n`multimocksDataProvider` also gives you the ability to overwrite the default\nheaders returned by Angular Multimocks. Below we're setting the headers to\nspecify that the content type is HAL JSON.\n\n```\n.config(['mutimocksDataProvider', function (multimocksDataProvider) {\n  multimocksDataProvider.setHeaders({\n    'Content-Type': 'application/hal+json'\n  });\n}]);\n```\n\nContributing\n------------\n\nWe :heart: pull requests!\n\nTo contribute:\n\n- Fork the repo\n- Run `npm install`\n- Run `bower install`\n- Run `grunt workflow:dev` to watch for changes, lint, build and run tests as\n  you're working\n- Write your unit tests for your change\n- Test with the demo app\n- Run `grunt package` to update the distribution files\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/wongatech/angular-multimocks/issues"
  },
  "homepage": "https://github.com/wongatech/angular-multimocks",
  "_id": "angular-multimocks@0.5.4",
  "_shasum": "455598a3b075c9f96e34a5d3a675c521a6c26094",
  "_from": "angular-multimocks@^0.5.4",
  "_resolved": "https://registry.npmjs.org/angular-multimocks/-/angular-multimocks-0.5.4.tgz"
}
